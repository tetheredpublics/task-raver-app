---
description: 
globs: 
alwaysApply: false
---
# Development Workflow

## Getting Started
1. Clone and install:
   ```bash
   git clone <repo>
   cd <project>
   npm install
   ```

2. Start development:
   ```bash
   npm run dev
   ```

## Development Tools

### TypeScript and Type Checking
- Use `npm run check` to verify TypeScript types
- Use `npm run check:watch` for continuous type checking
- TypeScript configuration in `tsconfig.json`
- Use strict mode for better type safety

### Code Quality Tools
- ESLint v9.18.0 for code linting
- Prettier v3.4.2 for code formatting
- Prettier plugins:
  - `prettier-plugin-svelte` for Svelte files
  - `prettier-plugin-tailwindcss` for Tailwind classes

### Testing Tools
- Vitest v3.0.0 for unit testing
- Playwright v1.49.1 for E2E testing
- Testing Library for component testing
- JSDOM for DOM testing environment

## Common Tasks

### Development
- `npm run dev` - Start development server
- `npm run check` - Check TypeScript types
- `npm run check:watch` - Watch for type changes
- `npm run format` - Format code with Prettier
- `npm run lint` - Run ESLint and Prettier checks

### Testing
- `npm run test:unit` - Run unit tests with Vitest
- `npm run test:e2e` - Run end-to-end tests with Playwright
- `npm run test` - Run all tests (unit + E2E)

### Building
- `npm run build` - Build for production
- `npm run preview` - Preview production build

## Git Workflow
1. Create feature branch:
   ```bash
   git checkout -b feature/name
   ```

2. Make changes and commit:
   ```bash
   git add .
   git commit -m "feat: description"
   ```

3. Run checks before pushing:
   ```bash
   npm run lint
   npm run check
   npm run test
   ```

4. Push and create PR:
   ```bash
   git push origin feature/name
   ```

## Deployment
- Automatic deployments to Netlify on push to main
- Preview deployments for PRs
- Environment variables configured in Netlify dashboard

## Troubleshooting

### Common Issues
1. **Type Errors**
   - Run `npm run check`
   - Check TypeScript configuration
   - Verify type definitions

2. **Test Failures**
   - Check test output for details
   - Verify test environment setup
   - Check for flaky tests

3. **Build Issues**
   - Check build logs
   - Verify dependencies
   - Check environment variables

4. **Development Issues**
   - Clear node_modules and reinstall
   - Check for conflicting dependencies
   - Verify Node.js version
